Тут находятся файлы для бота-архивариуса.
Бот позволяет загрузить/прочитать отчеты групп местности.
Пользователи бота подразделяются на 2 группы - Читатели и Писатели. Пароли для этих групп различны.
Читатели имеют право только для чтения, Писатели - чтение/запись.
Правда, в этом боте для групп доступ разрешен всем, пароли не обязательны.
С помощью кнопок выбираются интересующие год-месяц-подкомитет, и действие - чтение или запись.
Для записи в архив бот принимает текстовое сообщение или файл с отчетом, допустимы форматирование и эмодзи.
Есть также группа админов бота, которые имеют полный доступ и дополнительные кнопки в меню.
Админ бота может посмотреть/изменить пароли доступа, посмотреть список допущенных Читателей/Писателей,
посмотреть log-файл, удалить любой отчет.

arch_groups_bot.js - основной скрипт бота.
Для своей работы скрипт использует служебные файлы:
- filename_bot.json - имена файлов токенов, другие настройки.
- AdminBot.txt - массив админов бота, состоящий из ключа=chatId, и имени админа. Заполняется руками.
- ReaderList - json-список пользователей, прошедших авторизацию с правами Читателя.
- WriterList - json-список пользователей, прошедших авторизацию с правами Писателя.
- PasswordList.txt - json-список паролей доступа.
- BlackList.txt - json-список забаненных пользователей. Юзер попадает туда после 10-ти неверных попыток ввода пароля. Удаляется руками.
- LastMessId.txt - список последних messId пользователей для возможности удаления предыдущих сообщений с кнопками, чтобы не засорять чат.
- Comitee.txt - массив аббревиатур комитетов данной местности, из них создаются кнопки, можно изменять состав в файле.
- Year.txt - массив годов, пополняется новым годом автоматически при наступлении оного.
- /json/knopki.json - массив инлайн-кнопок бота по-умолчанию.
- /reports - директория для хранения отчетов.
Журнал работы скрипта сохраняется в файле /../log/имяБота.log.
Файл filename_bot.json содержит поля "file_arch_bot" и "file_mso_bot" с именами файлов токенов соотв. ботов.
Поле "mestnost" позволяет указать название местности.
Поле "mso_enable" (true/false) определяет вкл/выкл вспопогательного бота.

Если установлено "mso_enable":true, то скрипт запускает бота-помощника из "file_mso_bot", который дежурит в чате
и ловит сообщения с нужными тегами. Этот бот должен быть создан с настройкой Bot Setting -> Group Privacy = off, 
и добавлен в необходимую телеграм-группу.
В этой группе должны состоять служащие, которые будут публиковать в этой группе отчеты. Для того, чтобы отчет автоматически
сохранился в базе, в начале текста необходимо разместить хештег = #отчет Новая-02-2025 и далее через пробел или с новой строки
текст самого отчета. В хештеге 'Новая' - название группы, '02' - отчетный месяц, '2025' - отчетный год. Название группы
должно обязательно совпадать с одним из шаблонов в файле comitee.txt. Тоже самое справедливо и для
года и месяца - если год в хештеге не совпадает ни с каким значением из Year.txt, или месяц не равен 01-12,
то отчет не будет записан. 
Если использовать вспомогательного бота не нужно, то достаточно установить "mso_enable":false. 

Перед запуском скрипта необходимо заполнить файлы токенов используемых ботов в директории /Token,
а также файл chatId.json.

Готовый образ для Докера "kawadiyk/archgroupsbot:latest" можно загрузить из DockerHub.
//-----------------------------------------------------------------------------------
Запуск контейнера в докере является самым простым способом разворота этого бота в системе, если, конечно, пакет докера
уже установлен в системе. Установка докера подробно описана в файле Docker.txt в папке Doc репозитория.
Для того, чтобы развернуть бота в системе, нужно всего лишь создать нужные папки и запустить контейнер бота.
Итак:
1. В домашней папке пользователя (например: /home/anton, в дальнейшем будем звать ее ДОМ) нужно создать основную папку
местности, например Minsk (в дальнейшем будем звать ее РЕГИОН), а внутри нее создать папку для этого бота ArchBot,
или с любым другим именем (в дальнейшем будем звать ее БОТ). Тогда полный путь к боту будет выглядеть так:
ДОМ/РЕГИОН/БОТ
а если в расшифрованном виде, то:
/home/anton/Minsk/ArchBot
Права записи в эти папки лучше открыть для всех, чтоб не было проблем при записи логов из системы.
Папка бота БОТ должна иметь уникальное имя, отличное от других папок с ботами в этой местности.

2. Теперь запустим контейнер с ботом, и он сам развернет в созданных папках все необходимые для своей работы файлы:

docker run --name name_bot -v ДОМ/РЕГИОН:/home/pi/РЕГИОН:rw --restart=unless-stopped -d -e "CURRENT_DIR=/home/pi/РЕГИОН/БОТ" kawadiyk/archgroupsbot:latest ./arch_groups_bot
и следом остановить контейнер командой:
docker stop name_bot

где имя контейнера 'name_bot' можно заменить на любое другое, лишь бы самому понятно было, что это за бот.
Например: arch_bot, loader_bot, info_bot, и т.д.
Само собой, ДОМ, РЕГИОН и БОТ нужно заменить на свои пути и директории, о которых мы договорились выше.
После первого запуска бот еще не будет работать, ибо нужно заполнить вновь созданные (или уже имеющиеся, но дополненные)
файлы, согласно вышеописанным требованиям для этого бота.

3. После заполнения файлов токенами, именами и прочими настройками, нужно перезапустить контейнер командой:

docker restart name_bot

где name_bot нужно заменить на имя вашего контейнера, о чем говорилось выше.
После этого бот должен полноценно заработать.
Вот и все, что нужно сделать для запуска бота в докер-контейнере!
//-----------------------------------------------------------------------------------
Теперь запустить контейнер с ботом можно одной командой, без остановки и заполнения файлов настроек.
Нужно просто послать в контейнер все(или только нужные) параметры настроек, разместив их в переменных окружения.
В примере ниже прописаны все возможные переменные, но допустимо использовать их в любом сочетании или кол-ве.
Если остановить, удалить и запустить контейнер с новым набором окружения, то перезаписаны в нужные файлы на диске
будут только эти параметры.

1.
docker run --name name_bot -v ДОМ/РЕГИОН:/home/pi/РЕГИОН:rw --restart=unless-stopped -d \
-e "CURRENT_DIR=/home/pi/РЕГИОН/БОТ" \
-e "SUPERVISOR=1234567890" \
-e "REGION=Название вашей местности" \
-e "TOKEN_BOT=токен основного бота как есть" \
-e "NAME_BOT=это_мой_bot или как хотите" \
-e "TOKEN_LOG=токен для бота логов, если нужен" \
-e "NAME_LOG=это_лог_bot или как хотите" \
kawadiyk/archbot:latest ./arch_bot

2.
docker stop name_bot && docker rm name_bot

3.
docker run --name name_bot -v ДОМ/РЕГИОН:/home/pi/РЕГИОН:rw --restart=unless-stopped -d -e "CURRENT_DIR=/home/pi/РЕГИОН/БОТ" kawadiyk/archbot:latest ./arch_bot

Если не сделать перезагрузку контейнера после первой команды с настройками, то все последующие рестарты контейнера
будут перезаписывать эти параметры вновь и вновь, а это не есть хорошо.

Удачи вам!
