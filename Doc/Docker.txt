Докер можно приблизительно представить в виде виртуальной машины. Запускаешь файлик - и получаешь обособленную виртуальную систему, 
в которой уже все стоит, что надо. Так и в Докере - запускаешь контейнер и получаешь то, что уже предустановлено.
В этом прелесть Докера - не нужно устанавливать в свою систему необходимые для работы приложения пакеты, библиотеки и прочее.
Запустил контейнер - и вуаля! Все работает!
Для работы с Докером его нужно установить :), но это пожалуй единственная установка для работы с ботами в контейнерах.
Итак, приступим к установке Докера. Сначала хорошо бы проверить, имеет ли наша система в своих списках репозиторий Докера. 
Предполагаем, что вы работаете в системе под логином 'pi', не под 'root'. Проверим командой:

sudo apt update
apt-cache policy docker-ce

Если репозиторий уже прописан в системе, то вы увидите список версий Докера. Если вывода нет, то репозиторий нужно прописасть:

sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release -y
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null   

и после этого опять посмотреть вывод из него:

sudo apt update
apt-cache policy docker-ce

Если вывода списка опять нету, то нужно поискать в гугле - как установить Докер именно в вашу систему.
Когда репозиторий прописан, то можно приступать к установке собственно Докера:

sudo apt install docker-ce -y
sudo systemctl status docker

Последняя команда покажет статус установленного Докера. Установленный Докер должен быть сразу и запущен, на что указывает 'active (running)'.
Для того, чтобы не вводить каждый раз sudo перед командами Докера, можно добавить себя в группу docker:

sudo usermod -aG docker ${USER}
su - ${USER}

Теперь введите свой пароль и вы получите возможность работы с командами Докера без sudo.
Больше ничего устанавливать не требуется, нужно только скопировать в систему папку с конструктором бота - creator. Эта папка должна
быть на диске системы, так как бот пользуется файлами из нее. И мы тоже хотим видеть в логах, что там происходит.
От места нахождения папки creator зависит команда запуска контейнера в Докере. Предположим, что мы поставили creator вот сюда:

/home/pi/telegram/creator

Теперь (на всяк случай) дадим всем пользователям доступ к папке на чтение и запись:

chmod -R 777 /home/pi/telegram/creator

потому, что контейнер может работать под рутом, и возникнут конфликты при записи файлов.
Ну, вроде все. Можно запускать контейнер с контструктором бота:

docker run --name creator -v /home/pi/telegram/creator:/home/pi/telegram/creator:rw --restart=unless-stopped -d -e "CURRENT_DIR=/home/pi/telegram/creator/Bot" kawadiyk/creatorbot:latest ./creator_bot

Если этот образ запускается впервые, то Докер скачает его из хранилища. Затем внутрь контейнера пробросится наша папка creator
с возможностью записи. Запущенный контейнер с ботом получит имя 'creator', по этому имени его легко будет остановить или перезапустить.
В опциях команды запуска указано, что этот контейнер (бот) будет автоматически запускаться при перезагрузке всей системы, если только
контейнер не был остановлен руками, командой stop.

docker stop creator			- остановит контейнер
docker restart creator		- перезапустит контейнер (после остановки, например)

Если в конструкторе были проведены все подготовительные операции (установка токена и админа), то бот уже должен функционировать
и с ним можно взаимодействовать в Телеграме.

Если вы запускаете контейнер не на платформе linux/amd64 (ВПС, Десктоп и пр.), а на платформе 'малинки' и т.п., то образ в Докер-хранилище
нужно брать другой:

docker run --name creator -v /home/pi/telegram/creator:/home/pi/telegram/creator:rw --restart=unless-stopped -d -e "CURRENT_DIR=/home/pi/telegram/creator/Bot" kawadiyk/creatorbot:arm64 ./creator_bot

Также можно запускать несколько контейнеров ботов одновременно, при условии, что папки имеют различные имена и токены.
Тогда в каждой команде запуска нового контейнера нужно изменить путь к новой папке ('/home/pi/telegram/creator2' например)
и изменить имя контейнера ('--name creator2' например).
Познакомиться с возможностями и командами Докера предлагаю самостоятельно в Инете.
Удачи вам!




