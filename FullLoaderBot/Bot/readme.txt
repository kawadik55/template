Тут находятся файлы бота-загрузчика контента для автоматической публикации в каналах/группах новостей.
Теперь бот-загрузчик использует внутренний скрипт рассылки, установка дополнительного скрипта не требуется.
Работает иключительно в докер-контейнере, запуск в node-js не подразумевается.
Бот-загрузчик помогает авторизованному пользователю загрузить форматированное текстовое сообщение или картинку (видео, документ, альбом), и выбрать необходимую
периодичность публикаций загруженного материала. Периодичность может быть выбрана из: ежедневно, по дням недели, по дате наступления события.
Выбор 'по Дню Недели' подразумевает публикацию только в этот день недели, вплоть до указанной даты.
Выбор 'по Дате' подразумевает, что дата события может быть сколь угодно далека или близка, но публиковаться будет в некоторые дни
до наступления события, до этого - 1 раз в неделю.
Загруженный контент попадает на модерацию к Админу бота, затем оформляется к публикации скриптом Rassilka/rassilka.js, 
который рассовывает нужное по каналам и группам.
По истечении срока записи удаляются автоматически.
Доступ к боту разрешает Админ бота по запросу пользователя, допущенные пользователи сохраняются в файле UserList.txt.

Служебные файлы:
- /images - папка для хранения загруженных картинок.
- /moder - папка для ожидающих модерацию картинок.
- /Token - папка с токенами ботов, и чат-айди каналов.
- config.json - файл настроек бота.
- AdminBot.txt - список Админов бота (chat_id).
- AdminList.txt - массив административных констант - chat_id супервизора, chat_id координатора whatsup(если нужен).
- BlackList.txt - список забаненных пользователей, очищается руками.
- ImagesList.txt - список загруженных картинок. Запись имеет маркер периодичности, по которому может быть удалена автоматически.
- Url.txt - содержит ссылку для кнопки Вопросы, нужно заменить на свою.
- LastMessId.txt - список последних messId пользователей для возможности удаления предыдущих сообщений с кнопками, чтобы не засорять чат.
- TextList.txt - массив загруженных текстов.
- UserList.txt - список допущенных пользователей.
- buttons.txt - файл с объектом кнопок со ссылками, которые будут размещены под постом с расписанием собраний. Можно оставить пустым, если кнопки не нужны.
- run.txt - файл с объектом для включения/выключения публикаций Ежика, Расписания, Текстов, Картинок. Также тут нужно прописать пути к файлам Ежика и Расписания, относительно текущей рабочей папки, но не выше папки РЕГИОН из -v команды запуска.

Файл настроек config.json содержит поля:
"area" - название местности.
"timePablic" - время публикации постов, по которому скрипт определяет, была ли уже сегодня публикация, или нет.
"forDate" - массив дней для режима публикаций 'по Дате'. Например, [3,2,0] означает, что пост будет публиковаться
в 3-й, 2-й и 0-й день до наступления события, до этого - 1 раз в неделю.
"lifeTime" - срок действия регистрации юзера в днях, потом юзер удаляется из базы.
"rassilka" - выключатель внутренней функции рассылки, для использования внешнего скрипта рассылки.
"hostingImg" - выключатель хостинга картинок на этом хосте, если настроен конечно.
"pathHostingImg" - относительный путь к папке картинок с доступом для веб-сервера.
"hostname" - внешнее имя этого хоста.
Хостинг картинок можно использовать ТОЛЬКО, если админ понимает, что делает. После загрузки картинки бот выдает прямую ссылку на эту картинку. Должен работать веб-сервер на хосте.

Админу бота доступны дополнительные меню с кнопками, для модерации/удаления постов, добавления/удаления пользователей
и пр.

Перед запуском скрипта full_loader_bot.js необходимо заполнить файлы AdminList.txt и файлы токенов используемых ботов 
в директории /Token, а также файл chatId.json. 
Имена файлов токенов должны быть loader_bot.json, logs_bot.json и news_bot.json.
logs_bot.json - бот для важных системных сообщений Супервизору. Если не нужно, то можно удалить или оставить пустым.

Готовый образ для Докера "kawadiyk/fullloaderbot:latest" можно загрузить из DockerHub.
//-----------------------------------------------------------------------------------
Запуск контейнера в докере является самым простым способом разворота этого бота в системе, если, конечно, пакет докера
уже установлен в системе. Установка докера подробно описана в файле Docker.txt в папке Doc репозитория.
Для того, чтобы развернуть бота в системе, нужно всего лишь создать нужные папки и запустить контейнер бота.
Итак:
1. В домашней папке пользователя (например: /home/anton, в дальнейшем будем звать ее ДОМ) нужно создать основную папку
местности, например Minsk (в дальнейшем будем звать ее РЕГИОН), а внутри нее создать папку для этого бота, 
например LoaderBot (в дальнейшем будем звать ее БОТ). Тогда полный путь к боту будет выглядеть так:
ДОМ/РЕГИОН/БОТ
а если в расшифрованном виде, то:
/home/anton/Minsk/LoaderBot
Папка бота БОТ должна иметь уникальное имя, отличное от других папок с ботами в этой местности.

2. Теперь запустим контейнер с ботом, и он сам развернет в созданных папках все необходимые для своей работы файлы:

docker run --name name_bot -v ДОМ/РЕГИОН:/home/pi/РЕГИОН:rw --restart=unless-stopped -d -e "CURRENT_DIR=/home/pi/РЕГИОН/LoaderBot" kawadiyk/fullloaderbot:latest ./full_loader_bot
и следом остановить контейнер командой:
docker stop name_bot

где имя контейнера 'name_bot' можно заменить на любое другое, лишь бы самому понятно было, что это за бот.
Например: arch_bot, loader_bot, info_bot, и т.д.
Само собой, ДОМ, РЕГИОН и БОТ нужно заменить на свои пути и директории, о которых мы договорились выше.
После первого запуска бот еще не будет работать, ибо нужно заполнить вновь созданные (или уже имеющиеся, но дополненные)
файлы, согласно вышеописанным требованиям для этого бота.

3. После заполнения файлов токенами, именами и прочими настройками, нужно перезапустить контейнер командой:

docker restart name_bot

где name_bot нужно заменить на имя вашего контейнера, о чем говорилось выше.
После этого бот должен полноценно заработать.
Вот и все, что нужно сделать для запуска бота в докер-контейнере!
//-----------------------------------------------------------------------------------
Теперь запустить контейнер с ботом можно одной командой, без остановки и заполнения файлов настроек.
Нужно просто послать в контейнер все(или только нужные) параметры настроек, разместив их в переменных окружения.
В примере ниже прописаны все возможные переменные, но допустимо использовать их в любом сочетании или кол-ве.
Если остановить, удалить и запустить контейнер с новым набором окружения, то перезаписаны в нужные файлы на диске
будут только эти параметры.

1.
docker run --name name_bot -v ДОМ/РЕГИОН:/home/pi/РЕГИОН:rw --restart=unless-stopped -d \
-e "CURRENT_DIR=/home/pi/РЕГИОН/БОТ" \
-e "SUPERVISOR=chatId_Супервизора" \
-e "TOKEN_BOT=токен основного бота как есть" \
-e "NAME_BOT=это_мой_bot или как хотите" \
-e "TOKEN_LOG=токен для бота логов, если нужен" \
-e "NAME_LOG=это_лог_bot или как хотите" \
-e "TOKEN_NEWS=токен новостного бота, как есть" \
-e "NAME_NEWS=это_news_bot или как хотите" \
-e 'CONFIG_OBJ={"area":"Название вашей местности","timePablic":"06:00:00","forDate":[3,1,0],"lifeTime":"180","rassilka":true}' \
-e 'CHAT_NEWS_OBJ={"Ваш канал в телеграме":"-1234567890"}' \
-e 'BUTTONS_OBJ={"reply_markup":{ "inline_keyboard":[[{"text": "Духовные принципы на каждый день", "url": "https://t.me/+a8HO46bHu8MwZjZk"}]]}}' \
-e 'RUN_OBJ={"Text": true,"Image": true,"Eg": true,"Raspis": true,"FileEg":"/../Rassilka/eg.txt","FileRaspis":"/../Rassilka/raspis.txt"}' \
kawadiyk/fullloaderbot:latest ./full_loader_bot

2.
docker stop name_bot && docker rm name_bot

3.
docker run --name name_bot -v ДОМ/РЕГИОН:/home/pi/РЕГИОН:rw --restart=unless-stopped -d -e "CURRENT_DIR=/home/pi/РЕГИОН/БОТ" kawadiyk/fullloaderbot:latest ./full_loader_bot

Если не сделать перезагрузку контейнера после первой команды с настройками, то все последующие рестарты контейнера
будут перезаписывать эти параметры вновь и вновь, а это не есть хорошо.

Удачи вам!
