default:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  
build_ArchBot:
  stage: build
  variables:
    DIR: 'ArchBot'
    NAME: 'kawadiyk/archbot'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - docker images
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  #when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}
  
build_ArchGroupsBot:
  stage: build
  variables:
    DIR: 'ArchGroupsBot'
    NAME: 'kawadiyk/archgroupsbot'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - docker images
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}

build_Creator:
  stage: build
  variables:
    DIR: 'creator'
    NAME: 'kawadiyk/creatorbot'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - docker images
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}

build_GitLabBot:
  stage: build
  variables:
    DIR: 'GitLabBot'
    NAME: 'kawadiyk/gitlabbot'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - docker images
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/*.{js}

build_FullLoaderBot:
  stage: build
  variables:
    DIR: 'FullLoaderBot'
    NAME: 'kawadiyk/fullloaderbot'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    - docker images
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}

build_ParserEg:
  stage: build
  variables:
    DIR: 'ParserEg'
    NAME: 'kawadiyk/parsereg'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    - docker images
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}

build_ParserXls_Ufa:
  stage: build
  variables:
    DIR: 'Regions/Ufa/ParserXls'
    NAME: 'kawadiyk/parserxls_ufa'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    - docker images
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}

build_ParserXls_Kazan:
  stage: build
  variables:
    DIR: 'Regions/Kazan/ParserXls'
    NAME: 'kawadiyk/parserxls_kazan'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    - docker images
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}
        
build_Parser_Kazan:
  stage: build
  variables:
    DIR: 'Regions/Kazan/Parser'
    NAME: 'kawadiyk/parser_kazan'
  script:
    # строим новый образ
    - docker build -t ${NAME}:latest -f ${CI_PROJECT_DIR}/${DIR}/Dockerfile ${CI_PROJECT_DIR}/${DIR}
    - docker run -e DOCKER_HOST=tcp://$(grep docker /etc/hosts | cut -f1):2375 dslim/slim build --include-path=/home/pi/context --target ${NAME}:latest --tag ${NAME}:slim --http-probe=false --continue-after=1
    # удаляем latest образ
    - docker rmi ${NAME}:latest
    # переименовываем slim образ в latest
    - docker tag ${NAME}:slim ${NAME}:latest
    - docker rmi ${NAME}:slim
    - TEXT=`docker images`
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="${TEXT}" kawadiyk/gitlabbot:latest ./gitlab_bot
    - docker images
    #- docker login -u ${LOGIN} --password ${PASSW}
    - echo "${PASSW}" | docker login --username ${LOGIN} --password-stdin
    - docker push ${NAME}:latest
    - docker logout
    - docker run --rm --name gitlabbot -t -e TOKEN_BOT=${TOKEN_BOT} -e CHAT_ID=${CHAT_ID} -e MESSAGE="Билдинг образа $NAME:latest - успешно!" kawadiyk/gitlabbot:latest ./gitlab_bot
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - ${DIR}/Bot/*.{js}
        